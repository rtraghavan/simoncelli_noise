function [speed_exp,speed_bw] = lookupspeedexponent(params)
%LOOKUPSPEEDEXPONENT.M helps to determine the exponent used in the speed
%filter.
%
%[Y1] = LOOKUPSPEEDEXPONENT(X1,X2) accepts as input the center speed (X1)
%and the speed bandwidth (X2) in octaves that the user wishes the speed
%filter to have. It then uses a lookup table to calculate these values.
%
%
%INPUT:
%
%     params: structure generated by specifyfilterproperties.m
%
%OUTPUT:
%
%     speed_exp: exponent for filter 
%
%     speed_bw: bandwidth of filter. User specified in octaves but
%                    this gives the closest possible approximation of the
%                    filter bandwidth
%
%     Author: Ramanujan Raghavan:
%     Date:   06/04/2018
%           


center_speed = params.speed_dps;
speed_bw = params.speed_phibw;

speed_phi = atand(center_speed);

%step 1: determine bounds for bandwidth, remembering that sinusoids are
%symmetric

if (90-speed_phi)>speed_phi
    maxHalfBWDegree = speed_phi-.001;
else
    maxHalfBWDegree = 90-speed_phi-.001;
end
%%

bwRange = .001:.0001:maxHalfBWDegree;
lookuptable = zeros(length(bwRange),2);
ind = 1;
for bandwidth = bwRange
    
    exponent = log(.5)/log(sind(90-bandwidth));
    lookuptable(ind,1) = exponent;
    
    
    upperspeed = log2(tand(speed_phi+bandwidth));
    lowerspeed = log2(tand(speed_phi-bandwidth));
    lookuptable(ind,2) = upperspeed-lowerspeed;
    ind = ind+1;
end

%%
speed_exp = interp1(lookuptable(:,2),lookuptable(:,1),speed_bw);

if isnan(speed_exp)
    [~,minInd] = min(abs(speed_bw-lookuptable(:,2)));
    speed_exp = lookuptable(minInd,1);
    disp('that octave is not possible, defaulting to the closest possible value')
    halfbw = 90-asind(exp(log(.5)/speed_exp));
    upperspeed = log2(tand(speed_phi+halfbw));
    lowerspeed = log2(tand(speed_phi-halfbw));
    speed_bw = upperspeed-lowerspeed;
    
else
    
    %calculate things afterwards
    halfbw = 90-asind(exp(log(.5)/speed_exp));
    upperspeed = log2(tand(speed_phi+halfbw));
    lowerspeed = log2(tand(speed_phi-halfbw));
    speed_bw = upperspeed-lowerspeed;
    
end
